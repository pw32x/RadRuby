#include "..\stdafx.h"
#include "Palette.h"

#include "..\GraphicsGale\GraphicsGaleObject.h"
#include "..\Utils\StringUtils.h"
#include "..\Utils\WriteUtils.h"
#include "..\Utils\PaletteUtils.h"

#include <algorithm>
#include <fstream>
#include <sstream>
#include <iomanip>

Palette::Palette(const GraphicsGaleObject& ggo)
: m_ggo(ggo)
{
    /*
    HPALETTE hPalette = m_ggo.getPalette(0);

    int numEntries = GetPaletteEntries(hPalette, 0, 0, NULL);

    PALETTEENTRY paletteEntries[16];

    GetPaletteEntries(hPalette, 0, 16, paletteEntries);

    for (int loop = 0; loop < numEntries; loop++)
    {
        PALETTEENTRY* paletteEntry = &paletteEntries[loop];

        byte red = (byte)((float)(paletteEntry->peRed + 8) / 255.0f * 3.0f);
        byte green = (byte)((float)(paletteEntry->peGreen + 8) / 255.0f * 3.0f);
        byte blue = (byte)((float)(paletteEntry->peBlue + 8) / 255.0f * 3.0f);
        m_palette[loop] = red | (green << 2) | (blue << 4);
    }
    */
}

void Palette::Write(const std::string& outputFolder, const std::string& outputName)
{
	WritePaletteHeaderFile(outputFolder, outputName);
	WritePaletteSourceFile(outputFolder, outputName);
}


void Palette::WritePaletteHeaderFile(const std::string& outputFolder, 
                                     const std::string& outputName)
{
	std::string headerFilename = outputName + ".h";
	std::ofstream headerfile(outputFolder + headerFilename, std::ios::trunc);

    // header guard
    std::string headerGuard = outputName + "_PALETTE_INCLUDE_H";
    std::transform(headerGuard.begin(), headerGuard.end(), headerGuard.begin(), ::toupper);
    headerfile << "// File generated by SpriteMaster. https://github.com/pw32x/ninjagirl\n";
    headerfile << "#ifndef " << headerGuard << "\n";
    headerfile << "#define " << headerGuard << "\n";
    headerfile << "\n";

	// includes
    headerfile << "#include \"engine\\palette_types.h\"\n";
    headerfile << "#include \"engine\\resource_types.h\"\n";
    headerfile << "\n";

	// exported types

    headerfile << "RESOURCE() extern const PaletteResource " << outputName << ";\n"; 
    headerfile << "\n";

    // end header guard
    headerfile << "#endif\n\n";
    headerfile.close();
}

void Palette::WritePaletteValues(const std::string& outputName, std::ofstream& sourceFile)
{
    const unsigned int numEntries = 16;

    PALETTEENTRY paletteEntries[numEntries];

    HPALETTE hPalette = m_ggo.getPalette(0);
    PaletteUtils::GetPaletteData(hPalette, paletteEntries);

    sourceFile << "u16 " << outputName << "Values[16] = \n"; 
    sourceFile << "{\n";

    for (int loop = 0; loop < numEntries; loop++)
    {
        PALETTEENTRY* paletteEntry = &paletteEntries[loop];

        unsigned short red = (unsigned short)((float)paletteEntry->peRed / 256 * 8);
        unsigned short green = (unsigned short)((float)paletteEntry->peGreen / 256 * 8);
        unsigned short blue = (unsigned short)((float)paletteEntry->peBlue / 256 * 8);
        unsigned short paletteValue = (unsigned short)((red << 1) | (green << 5) | (blue << 9));

        sourceFile << "    0x" << std::hex << paletteValue << ", \n";
    }

    sourceFile << "};\n";

    /*
    sourceFile << "const u16 " << outputName << "Values[16] = \n";
    sourceFile << "{\n";

    for (size_t loop = 0; loop < 16; loop++)
    {
        sourceFile << "    0x" << std::setw(2) << std::setfill('0') << std::hex << (int)m_palette[loop] << ",\n";
    }

    sourceFile << "};\n\n";
    */
}

void Palette:: WritePaletteResource(const std::string& outputName, 
                                      std::ofstream& sourceFile)
{
    // final struct
    sourceFile << "const PaletteResource " << outputName << " = \n";
    sourceFile << "{\n";
    sourceFile << "    PALETTE_RESOURCE_TYPE, \n";
    sourceFile << "    " << outputName << "Values,\n";
    sourceFile << "};\n";
}

void Palette::WritePaletteSourceFile(const std::string& outputFolder, 
                                             const std::string& outputName)
{
	std::ofstream sourceFile(outputFolder + outputName + ".c");

    // includes
    sourceFile << "#include \"" << outputName << ".h\"\n";
    sourceFile << "\n";

    WritePaletteValues(outputName, sourceFile);
    WritePaletteResource(outputName, sourceFile);

    sourceFile.close();
}
